//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.05.04 at 04:59:32 PM BRT 
//


package uk.ac.manchester.dstoolkit.service.impl.util.importexport.schematiccorrespondences;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the uk.ac.manchester.dstoolkit.service.impl.util.importexport.schematiccorrespondences package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _SchemaName_QNAME = new QName("", "schemaName");
    private final static QName _Direction_QNAME = new QName("", "direction");
    private final static QName _Description_QNAME = new QName("", "description");
    private final static QName _Name_QNAME = new QName("", "name");
    private final static QName _Value_QNAME = new QName("", "value");
    private final static QName _Type_QNAME = new QName("", "type");
    private final static QName _ShortName_QNAME = new QName("", "shortName");
    private final static QName _Kind_QNAME = new QName("", "kind");
    private final static QName _ParentConstrName_QNAME = new QName("", "parentConstrName");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: uk.ac.manchester.dstoolkit.service.impl.util.importexport.schematiccorrespondences
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Constr }
     * 
     */
    public Constr createConstr() {
        return new Constr();
    }

    /**
     * Create an instance of {@link Correspondences }
     * 
     */
    public Correspondences createCorrespondences() {
        return new Correspondences();
    }

    /**
     * Create an instance of {@link Constructs2 }
     * 
     */
    public Constructs2 createConstructs2() {
        return new Constructs2();
    }

    /**
     * Create an instance of {@link Correspondence }
     * 
     */
    public Correspondence createCorrespondence() {
        return new Correspondence();
    }

    /**
     * Create an instance of {@link Param }
     * 
     */
    public Param createParam() {
        return new Param();
    }

    /**
     * Create an instance of {@link Constructs1 }
     * 
     */
    public Constructs1 createConstructs1() {
        return new Constructs1();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "schemaName")
    public JAXBElement<String> createSchemaName(String value) {
        return new JAXBElement<String>(_SchemaName_QNAME, String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "direction")
    public JAXBElement<String> createDirection(String value) {
        return new JAXBElement<String>(_Direction_QNAME, String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "description")
    public JAXBElement<String> createDescription(String value) {
        return new JAXBElement<String>(_Description_QNAME, String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "name")
    public JAXBElement<String> createName(String value) {
        return new JAXBElement<String>(_Name_QNAME, String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "value")
    public JAXBElement<String> createValue(String value) {
        return new JAXBElement<String>(_Value_QNAME, String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "type")
    public JAXBElement<String> createType(String value) {
        return new JAXBElement<String>(_Type_QNAME, String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "shortName")
    public JAXBElement<String> createShortName(String value) {
        return new JAXBElement<String>(_ShortName_QNAME, String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "kind")
    public JAXBElement<String> createKind(String value) {
        return new JAXBElement<String>(_Kind_QNAME, String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "parentConstrName")
    public JAXBElement<String> createParentConstrName(String value) {
        return new JAXBElement<String>(_ParentConstrName_QNAME, String.class, null, value);
    }

}
